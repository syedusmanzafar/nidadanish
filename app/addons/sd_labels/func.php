<?php
 declare(strict_types=1); use Tygh\Addons\SdLabels\LabelCollection; use Tygh\Addons\SdLabels\Labels\Label; use Tygh\Addons\SdLabels\Repositories\ProductLabelsRepository; use Tygh\Enum\{LabelType, LabelStatus, YesNo}; use Tygh\Models\VendorPlan; use Tygh\Registry; use Tygh\Http; use Tygh\Addons\SchemesManager; use Tygh\Addons\SdLabels\Labels\ProductRunningOutLabel; use Tygh\Addons\SdLabels\Repositories\LabelRepository; use Tygh\Settings; use Tygh\Addons\SdPwajet\Enum\Client; use Tygh\Enum\ProductFilterStyles; use Tygh\Tygh; use Tygh\Addons\ProductVariations\ServiceProvider; defined('BOOTSTRAP') or die('Access denied'); function fn_sd_labels_get_display_settings(string $controller, string $mode): array { if ($controller === 'products') { if ($mode === 'quick_view') { $show_sd_labels = YesNo::YES; $sd_overlay = YesNo::NO; } elseif ($mode === 'view') { $show_sd_labels = YesNo::YES; $sd_overlay = Registry::get('addons.sd_labels.detail_product_labels_overlay'); $labels_position = Registry::get('addons.sd_labels.detail_product_labels_position'); } } return [ 'show_sd_labels' => $show_sd_labels ?? YesNo::NO, 'sd_labels_overlay' => $sd_overlay ?? YesNo::NO, 'sd_labels_position' => $labels_position ?? '', 'sd_labels_hide_labels_on_hover_over_image' => Registry::get( 'addons.sd_labels.detail_product_labels_hide_labels_on_hover_over_image' ), ]; } function fn_sd_labels_check_availability(): bool { if (fn_allowed_for('MULTIVENDOR') && ACCOUNT_TYPE === 'vendor') { if (Registry::get('addons.vendor_plans.status') === 'A') { return VendorPlan::model()->find( ['company_id' => fn_get_runtime_company_id()] )['sd_available_for_vendors'] === YesNo::YES; } return false; } return true; } function fn_sd_labels_add_blocks_settings() { $schema = [ 'blocks/products/products_links_thumb.tpl' => [ 'show_sd_labels' => YesNo::NO ], 'blocks/products/products_scroller.tpl' => [ 'show_sd_labels' => YesNo::YES ], 'blocks/products/products_small_items.tpl' => [ 'show_sd_labels' => YesNo::NO ], 'blocks/products/short_list.tpl' => [ 'show_sd_labels' => YesNo::YES ], 'blocks/products/products.tpl' => [ 'show_sd_labels' => YesNo::YES , 'sd_labels_overlay' => YesNo::YES , 'sd_labels_position' => Label::TOP_LEFT ], 'blocks/products/products_multicolumns.tpl' => [ 'show_sd_labels' => YesNo::YES , 'sd_labels_overlay' => YesNo::YES , 'sd_labels_position' => Label::TOP_LEFT ] ]; if (fn_is_theme_installed('sd_torino_theme')) { $genz_schema = [ 'blocks/products/products_scroller_pro.tpl' => [ 'show_sd_labels' => YesNo::YES, 'sd_labels_overlay' => YesNo::YES, 'sd_labels_position' => Label::TOP_LEFT, ], 'blocks/products/inline_list.tpl' => [ 'show_sd_labels' => YesNo::YES, 'sd_labels_overlay' => YesNo::YES, 'sd_labels_position' => Label::TOP_LEFT, ], ]; $schema = array_merge($schema, $genz_schema); } if (fn_is_theme_installed('abt__unitheme2')) { $unitheme_schema = [ 'blocks/products/products_scroller_advanced.tpl' => [ 'show_sd_labels' => YesNo::YES, 'sd_labels_ovelay' => YesNo::YES, 'sd_labels_position' => Label::TOP_LEFT, ], ]; $schema = array_merge($schema, $unitheme_schema); } if (fn_is_theme_installed('abt__youpitheme')) { $youpi_schema = [ 'blocks/products/abt__yt_products_multicolumns_with_banners.tpl' => [ 'show_sd_labels' => YesNo::YES, 'sd_labels_overlay' => YesNo::YES, 'sd_labels_position' => Label::TOP_LEFT, ], 'blocks/products/abt__yt_products_scroller_advanced_with_banners.tpl' => [ 'show_sd_labels' => YesNo::YES, 'sd_labels_overlay' => YesNo::YES, 'sd_labels_position' => Label::TOP_LEFT, ], ]; $schema = array_merge($schema, $youpi_schema); } $product_blocks = db_get_array('SELECT * FROM ?:bm_blocks WHERE type = ?s', 'products'); foreach ($product_blocks as $block) { $properties = unserialize($block['properties'], ['allowed_classes' => false]); if (isset($schema[$properties['template']]) && !isset($properties['show_sd_labels'])) { foreach ($schema[$properties['template']] as $key => $value) { $properties[$key] = $value; } db_query('UPDATE ?:bm_blocks SET ?u WHERE block_id = ?i', ['properties' => serialize($properties)], $block['block_id'] ); } } } function fn_sd_label_update_settings(array $settings): void { $save_setting_ids = [ 'text_label_round_corners', 'text_label_corner_radius' ]; if (isset($settings['update_all_text_label_round_corners']) && $settings['update_all_text_label_round_corners'] === YesNo::YES) { $company_ids = fn_get_all_companies_ids(); } else { $company_ids = [fn_get_runtime_company_id()]; } foreach ($company_ids as $company_id) { foreach ($save_setting_ids as $setting_id) { if (isset($settings[$setting_id])) { Settings::instance()->updateValue($setting_id, $settings[$setting_id], 'sd_labels', true, $company_id); } } } } function fn_sd_labels_limit_quantity(array $labels, string $label_type): array { $max = Registry::get('addons.sd_labels.' . $label_type . '_label_max_items'); return array_slice($labels, 0, intval($max)); } function fn_sd_labels_prepare_for_storefront( array $product_labels, LabelRepository $labels_repository, array $extended_data ): array { $label_collection = $labels_repository->getLabelCollection(); $prepared_labels = fn_sd_labels_get_label_data($product_labels, $label_collection, $extended_data); $prepared_labels = fn_sd_labels_split_labels($prepared_labels); $prepared_labels = fn_sd_labels_filter_active($prepared_labels, $labels_repository); foreach (array_keys($prepared_labels) as $display_type) { $prepared_labels[$display_type] = $label_collection->sortByPosition($prepared_labels[$display_type]); $prepared_labels[$display_type] = fn_sd_labels_limit_quantity( $prepared_labels[$display_type], $display_type ); } return $prepared_labels; } function fn_sd_labels_get_label_data( array $product_labels, LabelCollection $label_collection, array $extended_data ): array { return array_map(function ($label_id) use ($label_collection, $extended_data) { $label = $label_collection->getLabelById((int) $label_id); if ($label) { $label_array = $label->toArray(); if (method_exists($label, 'prepareName')) { $label_array['name'] = $label->prepareName($extended_data); } $theme_labels = fn_sd_labels_get_theme_labels(); if (in_array($label_array['label_type'], array_keys($theme_labels))) { $label_array['belong'] = $theme_labels[$label_array['label_type']]; } return $label_array; } return false; }, $product_labels); } function fn_sd_labels_filter_active(array $product_labels, LabelRepository $labels_repository): array { $label_collection = $labels_repository->getLabelCollection(); foreach ($product_labels as &$labels) { $labels = array_filter($labels, function ($label) use ($label_collection) { if (!empty($label['label_id'])) { $label_status = $label_collection->getLabelById((int) $label['label_id'])->getStatus() ?? ''; return ($label_status === LabelStatus::ACTIVE) || ($label_status === LabelStatus::THEME_LABEL); } return false; }); } unset($labels); return $product_labels; } function fn_sd_labels_split_labels(array $product_labels): array { return array_reduce($product_labels, function ($product_labels, $label) { $product_labels[$label['display_type']][] = $label; return $product_labels; }, []); } function fn_sd_labels_get_label_statuses($use_theme_label = false) { $label_statuses = []; $statuses = LabelStatus::getAll(); foreach ($statuses as $status) { if (!$use_theme_label && $status === LabelStatus::THEME_LABEL) { continue; } $label_statuses[$status] = __("sd_labels.status.{$status}"); } return $label_statuses; } function fn_sd_labels_get_theme_labels() { $additional_settings_schema = fn_get_schema('labels', 'additional_settings'); return $additional_settings_schema['theme_labels']; } function fn_sd_labels_get_product_variation_ids($product_id) { if (Registry::get('addons.product_variations.status') == 'A') { $product_id_map = ServiceProvider::getProductIdMap(); $children_ids = $product_id_map->getProductChildrenIds($product_id); return $children_ids; } else { return false; } } function fn_sd_labels_get_filters_products_count_pre($params, $cache_params, &$cache_tables) { if (AREA === 'C') { $category_ids = []; if (!empty($params['category_id'])) { if (Registry::get('settings.General.show_products_from_subcategories') === YesNo::YES) { $id_path = db_get_field( 'SELECT id_path FROM ?:categories WHERE category_id = ?i', $params['category_id'] ); $category_ids = db_get_fields( 'SELECT category_id FROM ?:categories WHERE id_path LIKE ?l', $id_path . '/%' ); } $category_ids[] = $params['category_id']; } Registry::set('filter_category_ids', $category_ids); } $cache_tables[] = 'product_sd_labels'; } function fn_sd_labels_get_product_filter_fields(&$filters) { $filters[LabelRepository::FILTER_KEY] = [ 'db_field' => 'label_id', 'table' => 'product_sd_labels', 'description' => 'sd_labels', 'condition_type' => 'F', 'variant_name_field' => 'label_id' ]; } function fn_sd_labels_get_current_filters_post( $params, $filters, $selected_filters, $area, $lang_code, $variant_values, $range_values, &$field_variant_values, $field_range_values ) { $labels_collection = Tygh::$app['addons.sd_labels.label_repository']->getLabelCollection(); $filter_key = array_search('L', array_column($filters, 'field_type', 'filter_id'), true); if (isset($field_variant_values[$filter_key]['variants'])) { foreach ($field_variant_values[$filter_key]['variants'] as $label_id => &$label) { $current_label = $labels_collection->getLabelById($label_id); if ($current_label) { if ($current_label->getStatus() !== LabelStatus::ACTIVE) { unset($field_variant_values[$filter_key]['variants'][$label_id]); continue; } $label_name = method_exists($current_label, 'prepareName') ? $current_label->prepareName() : $current_label->getName(); $label['variant'] = $label_name; $label['variant_id'] = (int) str_replace('_', '', $label['variant_id']); $label['position'] = $current_label->getPosition(); } } $field_variant_values[$filter_key]['variants'] = fn_sort_array_by_key($field_variant_values[$filter_key]['variants'], 'position'); } } function fn_sd_labels_get_products_before_select(&$params, &$join, &$condition) { $label_conditions = []; $label_repository = Tygh::$app['addons.sd_labels.label_repository']; $labels = $label_repository->getLabelCollection()->toArray(); foreach ($labels as $label) { if (isset($params['filter_params']['label_id']) && !empty($params['filter_params']['label_id'])) { $label_filters = $params['filter_params']['label_id']; if (in_array($label['label_id'], $label_filters, true)) { $label_conditions[] = db_quote('product_sd_labels.label_id = ?s', $label['label_id']); unset($params['filter_params']['label_id'][$label['label_id']]); } } } if (!empty($label_conditions)) { $condition .= db_quote(' AND (' . implode(' OR ', $label_conditions) . ')'); $join .= ' LEFT JOIN ?:product_sd_labels as product_sd_labels' . ' ON product_sd_labels.product_id = products.product_id'; } } function fn_sd_labels_gather_additional_product_data_post(&$product) { if (AREA === 'C') { $product_labels = Tygh::$app['addons.sd_labels.product_labels']; $product_labels = $product_labels->getProductLabels((int)$product['product_id']); $labels_repository = Tygh::$app['addons.sd_labels.label_repository']; $label_collection = $labels_repository->getLabelCollection(); if (isset($product['free_shipping']) && $product['free_shipping'] === YesNo::YES) { $product_labels[] = $label_collection->getLabelByType(LabelType::FREESHIPPING)->getLabelId(); } if (!empty($product['discount_prc'])) { $discount = $product['discount_prc']; } elseif (!empty($product['list_discount_prc'])) { $discount = $product['list_discount_prc']; } $extended_data = []; if (isset($discount)) { $product_labels[] = $label_collection->getLabelByType(LabelType::DISCOUNT)->getLabelId(); $extended_data['discount'] = $discount; } if ( isset($product['amount']) && ($product['amount'] <= 0 || (isset($product['min_qty']) && $product['amount'] < $product['min_qty'])) && ( (isset($product['out_of_stock_actions']) && $product['out_of_stock_actions'] != 'B') || !isset($product['out_of_stock_actions']) ) ) { $product_labels[] = $label_collection->getLabelByType(LabelType::OUTOFSTOCK)->getLabelId(); } if ( (isset($product['amount'], $product['out_of_stock_actions']) && $product['out_of_stock_actions'] == 'B') && ( $product['amount'] <= 0 || (isset($product['min_qty']) && $product['amount'] < $product['min_qty']) || (isset($product['avail_since']) && $product['avail_since'] > TIME) ) ) { $product_labels[] = $label_collection->getLabelByType(LabelType::ON_BACKORDER)->getLabelId(); } if (ProductRunningOutLabel::isShowing($product)) { $product_labels[] = $label_collection->getLabelByType(LabelType::PRODUCT_RUNNING_OUT)->getLabelId(); } $product_labels = fn_sd_labels_prepare_for_storefront($product_labels, $labels_repository, $extended_data); $product['sd_labels'] = $product_labels; } } function fn_sd_labels_get_product_data_post(&$product_data) { if (AREA === 'A') { $product_labels = Tygh::$app['addons.sd_labels.product_labels']; $product_id = $product_data['product_id'] ?? 0; if (fn_sd_labels_get_product_variation_ids($product_id)) { $product_data['sd_labels_for_variations'] = $product_labels->getParentVariationStatus((int) $product_data['product_id']); } $product_labels = $product_labels->getProductLabels((int)$product_data['product_id']); $product_data['sd_labels'] = $product_labels; } } function fn_sd_labels_update_product_post(array $product_data, int $product_id) { if (isset($product_data['sd_labels'])) { $label_repository = Tygh::$app['addons.sd_labels.label_repository']; $product_labels = Tygh::$app['addons.sd_labels.product_labels']; $new_labels = $product_data['sd_labels'] ?: []; $old_labels = $product_labels->getProductLabels($product_id); $attach_labels = array_diff($new_labels, $old_labels); $detach_labels = array_diff($old_labels, $new_labels); $labels_collection = $label_repository->getLabelCollection(); if (fn_allowed_for('MULTIVENDOR') && ACCOUNT_TYPE === 'vendor') { $labels_collection = $labels_collection->getVendorLabels(); } foreach ($attach_labels as $label_id) { $label = $labels_collection->getLabelById((int) $label_id); if ($label !== false && !isset($product_data['sd_labels_for_variations'])) { $product_labels->attachLabel($product_id, (int) $label_id, YesNo::NO); } elseif ($label !== false && $product_data['sd_labels_for_variations']) { $product_labels->attachLabel($product_id, (int) $label_id, $product_data['sd_labels_for_variations']); } } foreach ($detach_labels as $label_id) { $label = $labels_collection->getLabelById((int) $label_id); if ($label !== false && !isset($product_data['sd_labels_for_variations'])) { $product_labels->detachLabel($product_id, (int) $label_id, YesNo::NO); } elseif ($label !== false && $product_data['sd_labels_for_variations']) { $product_labels->detachLabel($product_id, (int) $label_id, $product_data['sd_labels_for_variations']); } } if (isset($product_data['sd_labels_for_variations'])) { $children_ids = fn_sd_labels_get_product_variation_ids($product_id); $parent_variation_status = $product_labels->getParentVariationStatus($product_id); $parent_labels = $product_labels->getProductLabels($product_id); if ($product_data['sd_labels_for_variations'] == YesNo::YES) { array_map(function ($child_id) use ($attach_labels, $labels_collection, $product_labels, $product_data) { foreach ($attach_labels as $label_id) { $label = $labels_collection->getLabelById((int) $label_id); if ($label !== false) { $product_labels->attachLabel((int) $child_id, (int) $label_id, $product_data['sd_labels_for_variations']); } } }, $children_ids); array_map(function ($child_id) use ($detach_labels, $labels_collection, $product_labels, $product_data) { foreach ($detach_labels as $label_id) { $label = $labels_collection->getLabelById((int) $label_id); if ($label !== false) { $product_labels->detachLabel((int) $child_id, (int) $label_id, $product_data['sd_labels_for_variations']); } } }, $children_ids); if ($product_data['sd_labels_for_variations'] !== $parent_variation_status && $parent_variation_status == YesNo::NO ) { array_map(function ($child_id) use ($parent_labels, $labels_collection, $product_labels, $product_data) { foreach ($parent_labels as $parent_label) { $label = $labels_collection->getLabelById((int) $parent_label); if ($label !== false) { $product_labels->attachLabel((int) $child_id, (int) $parent_label, $product_data['sd_labels_for_variations']); } } }, $children_ids); db_query('UPDATE ?:product_sd_labels SET from_parent = ?s WHERE product_id = ?i', $product_data['sd_labels_for_variations'], $product_id); } } if ($product_data['sd_labels_for_variations'] !== $parent_variation_status && $product_data['sd_labels_for_variations'] == YesNo::NO ) { $product_labels->deleteLabelFromProducts($children_ids, $parent_labels); db_query('UPDATE ?:product_sd_labels SET from_parent = ?s WHERE product_id = ?i', $product_data['sd_labels_for_variations'], $product_id); } } } if (!empty($product_data['sd_labels_override'])) { $label_repository = Tygh::$app['addons.sd_labels.label_repository']; $product_labels = Tygh::$app['addons.sd_labels.product_labels']; $attach_labels = $product_data['sd_labels_override'] ?: []; $labels_collection = $label_repository->getLabelCollection(); if (fn_allowed_for('MULTIVENDOR') && ACCOUNT_TYPE === 'vendor') { $labels_collection = $labels_collection->getVendorLabels(); } foreach ($labels_collection as $label) { $product_labels->detachLabel($product_id, $label->getLabelId()); } foreach ($attach_labels as $label_id) { $label = $labels_collection->getLabelById((int) $label_id); if ($label !== false) { $product_labels->attachLabel($product_id, (int) $label_id, YesNo::NO); } } } } function fn_sd_labels_get_products($params, $fields, $sortings, &$condition, &$join) { if (!empty($params['search_labels'])) { $label_conditions = array_reduce($params['search_labels'], function ($conditions, $label_name) { $conditions[] = db_quote('product_sd_labels.label_id = ?s', $label_name); return $conditions; }, []); if (!empty($label_conditions)) { $condition .= db_quote(' AND (' . implode(' OR ', $label_conditions) . ')'); $join .= ' LEFT JOIN ?:product_sd_labels as product_sd_labels' . ' ON product_sd_labels.product_id = products.product_id'; } } } function fn_sd_labels_get_products_views_post(&$products_views, $simple_mode, $active) { if ($simple_mode) { return; } $products_views['products_multicolumns']['sd_labels'] = [ 'show_sd_labels' => Registry::get('addons.sd_labels.products_multicolumns_template_viewer_show_labels'), 'sd_labels_overlay' => Registry::get('addons.sd_labels.products_viewer_labels_overlay'), 'sd_labels_position' => Registry::get( 'addons.sd_labels.products_multicolumns_template_viewer_labels_position' ), 'sd_labels_hide_labels_on_hover_over_product_card' => Registry::get( 'addons.sd_labels.products_multicolumns_template_viewer_hide_labels_on_hover_over_product_card' ), ]; $products_views['products_without_options']['sd_labels'] = [ 'show_sd_labels' => Registry::get('addons.sd_labels.products_without_options_template_viewer_show_labels'), 'sd_labels_overlay' => Registry::get('addons.sd_labels.products_viewer_labels_overlay'), 'sd_labels_position' => Registry::get('addons.sd_labels.products_without_options_template_viewer_labels_position'), 'sd_labels_hide_labels_on_hover_over_image' => Registry::get( 'addons.sd_labels.products_without_options_template_viewer_hide_labels_on_hover_over_image' ), ]; $products_views['short_list']['sd_labels'] = [ 'show_sd_labels' => Registry::get('addons.sd_labels.products_short_list_template_viewer_show_labels'), 'sd_labels_overlay' => YesNo::NO, 'sd_labels_position' => '', ]; } function fn_sd_labels_tools_change_status($params, $result) { if ($params['id_name'] === 'label_id' && $result) { fn_clear_cache(); } } function fn_sd_labels_sd_pwajet_get_storefront($storefront_id, &$storefront_data) { if (!isset($storefront_data['properties']['sd_labels']['settings'])) { $storefront_data['properties']['sd_labels']['settings'] = []; } $storefront_data['properties']['sd_labels']['settings'] = [ 'general' => [ 'text_labels' => [ 'display_in_column' => YesNo::toBool(Registry::get('addons.sd_labels.text_label_is_column')), 'round_corners' => YesNo::toBool(Registry::get('addons.sd_labels.text_label_round_corners')), 'corner_radius' => (int) Registry::get('addons.sd_labels.text_label_corner_radius'), ], 'graphic_label' => [ 'display_in_column' => YesNo::toBool(Registry::get('addons.sd_labels.graphic_label_is_column')), ], ], 'product_detail' => [ 'font_size' => (int) Registry::get('addons.sd_labels.detail_product_text_label_font_size'), 'image_width' => (int) Registry::get('addons.sd_labels.detail_product_graphic_label_image_width'), 'image_height' => (int) Registry::get('addons.sd_labels.detail_product_graphic_label_image_height'), 'apply_overlay' => YesNo::toBool(Registry::get('addons.sd_labels.detail_product_labels_overlay')), 'position' => Registry::get('addons.sd_labels.detail_product_labels_position'), 'hide_labels_on_hover' => YesNo::toBool(Registry::get('addons.sd_labels.detail_product_labels_hide_labels_on_hover_over_image')), ], 'product_lists' => [ 'font_size' => (int) Registry::get('addons.sd_labels.products_viewer_text_label_font_size'), 'image_ width' => (int) Registry::get('addons.sd_labels.products_viewer_graphic_label_image_width'), 'image_height' => (int) Registry::get('addons.sd_labels.products_viewer_graphic_label_image_height'), 'apply_overlay' => YesNo::toBool(Registry::get('addons.sd_labels.products_viewer_labels_overlay')), 'grid_position' => Registry::get('addons.sd_labels.products_multicolumns_template_viewer_labels_position'), 'list_position' => Registry::get('addons.sd_labels.products_without_options_template_viewer_labels_position'), 'hide_labels_on_hover_on_grid' => YesNo::toBool(Registry::get('addons.sd_labels.products_multicolumns_template_viewer_hide_labels_on_hover_over_product_card')), 'hide_labels_on_hover_on_list' => YesNo::toBool(Registry::get('addons.sd_labels.products_without_options_template_viewer_hide_labels_on_hover_over_image')), ], ]; } function fn_sd_labels_get_filters_products_count_post($params, $lang_code, &$filters, $selected_filters) { if ( Registry::get('addons.sd_pwajet.status') === 'A' && Tygh::$app['addons.sd_pwajet.common']->checkClientRequest(Client::SD_SPA) ) { foreach ($filters as &$filter) { if ($filter['field_type'] === LabelRepository::FILTER_KEY) { $filter['field_type'] = ''; $filter['filter_style'] = ProductFilterStyles::CHECKBOX; } } } }