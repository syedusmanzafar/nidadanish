<?php
 declare(strict_types=1); namespace Tygh\Addons\SdLabels; use Tygh\Addons\SdLabels\Exceptions\LabelNotFoundException; use Tygh\Addons\SdLabels\Labels\Label; use Tygh\Enum\NotificationSeverity; class LabelFactory { public function createLabel(array $label) { if ($label['display_type'] === Label::TEXT) { return $this->createTextLabel($label); } if ($label['display_type'] === Label::GRAPHIC) { return $this->createGraphicLabel($label); } fn_set_notification( NotificationSeverity::ERROR, __('error'), __('sd_labels.cant_create_label', ['[name]' => $label['name']]) ); return false; } protected function createTextLabel(array $label) { $label_class = $this->getLabelClass($label['label_type']); $label['main_pair'] = []; return empty($label_class) ? false : new $label_class($label); } protected function createGraphicLabel(array $label) { $label_class = $this->getLabelClass($label['label_type']); $label['text_color'] = Label::DEFAULT_TEXT_COLOR; $label['background_color'] = Label::DEFAULT_BACKGROUND_COLOR; return empty($label_class) ? false : new $label_class($label); } protected function getLabelClass(string $label_type): string { $prepared_label_type = array_reduce( explode('_', $label_type), function($carry, $part_label_type) { return $carry . ucfirst($part_label_type); }, '' ); $label_class = '\Tygh\Addons\SdLabels\Labels\\' . $prepared_label_type . 'Label'; return class_exists($label_class) ? $label_class : ''; } }