<?php
 declare(strict_types=1); namespace Tygh\Addons\SdLabels\Repositories; use Tygh\Addons\SdLabels\LabelCollection; use Tygh\Addons\SdLabels\LabelFactory; use Tygh\Addons\SdLabels\Labels\Label; use Tygh\Database\Connection; use Tygh\Enum\ImagePairTypes; use Tygh\Enum\LabelType; use Tygh\Enum\NotificationSeverity; use Tygh\Enum\YesNo; use Tygh\Languages\Languages; use Tygh\Registry; class LabelRepository { public const FILTER_KEY = 'L'; protected $db; private $labelCollection; private $langCode; private $imageRepository; public function __construct( Connection $db, LabelImgRepository $label_repository, $langCode = 'en' ) { $this->db = $db; $this->imageRepository = $label_repository; $this->langCode = $langCode; $this->labelCollection = $this->getLabels(); } public function getLabelCollection(): LabelCollection { return $this->labelCollection; } public function updateLabel(array $data, string $lang_code = DESCR_SL): bool { if ($data['display_type'] === Label::GRAPHIC) { $data['background_color'] = Label::DEFAULT_BACKGROUND_COLOR; } else { $data['background_color'] = !empty($data['background_color']) ? $data['background_color'] : Label::DEFAULT_BACKGROUND_COLOR; $data['text_color'] = $data['text_color'] ?: Label::DEFAULT_TEXT_COLOR; } $data['additional_settings'] = isset($data['additional_settings']) ? serialize($data['additional_settings']) : ''; try { if (!empty($data['label_id'])) { $data['lang_code'] = $this->langCode; $label_id = $this->getLabelCollection()->getLabelById((int) $data['label_id'])->getLabelId(); if ($data['display_type'] === Label::GRAPHIC) { $updated = $this->imageRepository->updateLabelImg($label_id, $data['display_type']); if (!$updated) { fn_set_notification( NotificationSeverity::WARNING, __('warning'), __('sd_labels.warnings.image_label_failed_warning') ); $data['display_type'] = Label::TEXT; } } $this->db->query('UPDATE ?:sd_labels SET ?u WHERE label_id = ?s', $data, $label_id); $data['label_id'] = $label_id; $data['lang_code'] = $lang_code; $this->db->replaceInto('sd_labels_descriptions', $data); if (isset($data['apply_tooltip_to_all_langs'], $data['tooltip_content']) && $data['apply_tooltip_to_all_langs'] === YesNo::YES) { foreach (array_keys(Languages::getAll()) as $language) { $tooltip_data = [ 'label_id' => $label_id, 'lang_code' => $language, 'tooltip_content' => $data['tooltip_content'], ]; $this->db->replaceInto('sd_labels_descriptions', $tooltip_data); } } } else { $data['label_type'] = LabelType::CUSTOM; $data['attachable'] = YesNo::YES; $label_id = $this->db->query('INSERT INTO ?:sd_labels ?e', $data); foreach (array_keys(Languages::getAll()) as $language) { $data['label_id'] = $label_id; $data['lang_code'] = $language; $this->db->replaceInto('sd_labels_descriptions', $data); } if ($data['display_type'] === Label::GRAPHIC) { $this->imageRepository->updateLabelImg($label_id, $data['display_type']); } } } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); } return true; } public function deleteLabel(int $label_id): bool { if (empty($label_id)) { return false; } $label = $this->getLabelCollection()->getLabelById($label_id); if ($label->getLabelType() !== LabelType::CUSTOM) { fn_set_notification( NotificationSeverity::ERROR, __('error'), __('sd_labels.cant_delete_label', ['[name]' => $label->getName()]) ); return false; } try { $this->db->query('DELETE FROM ?:sd_labels WHERE label_id = ?s', $label_id); $this->db->query('DELETE FROM ?:sd_labels_descriptions WHERE label_id = ?s', $label_id); fn_delete_image_pairs($label_id, 'label', ImagePairTypes::MAIN); } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); } return true; } private function getLabels(): LabelCollection { Registry::registerCache( 'sd_labels', ['sd_labels', 'sd_labels_description'], Registry::cacheLevel('static'), true ); $label_objects = Registry::get('sd_labels'); if (!empty($label_objects)) { return $label_objects; } $quote = $this->db->quote('SELECT * FROM ?:sd_labels ORDER BY position'); $labels = $this->db->getHash($quote, 'label_id'); foreach ($labels as &$label_object) { if ($label_object['label_id']) { $quote_description = $this->db->quote('
                    SELECT name, tooltip_content, lang_code
                    FROM ?:sd_labels_descriptions WHERE label_id = ?s', $label_object['label_id'] ); $label_description = $this->db->getHash($quote_description, 'lang_code'); foreach ($label_description as $lang_code => $entity) { if (isset($label_object['name'])) { $label_object['name'] += [$lang_code => $entity['name']]; } else { $label_object['name'] = [$lang_code => $entity['name']]; } if (isset($label_object['tooltip_content'])) { $label_object['tooltip_content'] += [$lang_code => $entity['tooltip_content']]; } else { $label_object['tooltip_content'] = [$lang_code => $entity['tooltip_content']]; } } if ($label_object['display_type'] === Label::GRAPHIC) { $label_object['main_pair'] = $this->imageRepository->getImg($label_object['label_id'], 'label'); } } } unset($label_object); $label_objects = new LabelCollection(); $labelFactory = new LabelFactory(); foreach ($labels as $label) { $label_object = $labelFactory->createLabel($label); if ($label_object && $label_object->checkConditions()) { $label_objects->addLabel($label_object); } } if (!empty($label_objects)) { Registry::set('sd_labels', $label_objects); } return $label_objects; } public function updatePositions(string $positions): bool { $positions_array = explode(',', $positions); try { foreach ($positions_array as $position => $label_id) { $this->db->query('UPDATE ?:sd_labels SET ?u WHERE label_id = ?s', ['position' => $position], $label_id); } } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); } return true; } }