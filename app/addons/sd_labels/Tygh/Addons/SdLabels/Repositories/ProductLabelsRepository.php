<?php
 declare(strict_types=1); namespace Tygh\Addons\SdLabels\Repositories; use Tygh\Database\Connection; use Tygh\Enum\NotificationSeverity; use Tygh\Enum\YesNo; use Tygh\Registry; class ProductLabelsRepository { protected $db; private $productLabelsList; public function __construct(Connection $db) { $this->db = $db; $this->productLabelsList = []; } public function getProductLabels(int $product_id): array { if (empty($product_id)) { return []; } if (isset($this->productLabelsList[$product_id])) { return $this->productLabelsList[$product_id]; } $product_labels = $this->getLabelsFromDb($product_id); if (!empty($product_labels)) { $this->productLabelsList[$product_id] = $product_labels; return $this->productLabelsList[$product_id]; } return []; } public function attachLabel(int $product_id, int $label_id, string $for_variations, bool $is_auto = false): bool { $check_exists = $this->db->getField( 'SELECT count(1) FROM ?:product_sd_labels WHERE product_id = ?i AND label_id = ?s', $product_id, $label_id ); if ($check_exists) { return false; } $insert['product_id'] = $product_id; $insert['label_id'] = $label_id; $insert['is_auto'] = $is_auto ? YesNo::YES : YesNo::NO; $insert['from_parent'] = $for_variations ? $for_variations : YesNo::NO; try { $updated = $this->db->replaceInto('product_sd_labels', $insert); } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); return false; } return isset($updated) && $updated; } public function detachLabel(int $product_id, int $label_id): bool { try { $updated = $this->db->query( 'DELETE FROM ?:product_sd_labels WHERE product_id = ?i AND label_id = ?s', $product_id, $label_id ); } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); return false; } return isset($updated) && $updated; } public function getLabelsFromDb(int $product_id): array { Registry::registerCache( 'sd_labels_products', ['product_sd_labels'], Registry::cacheLevel('static'), true ); $labels = Registry::get('sd_labels_products'); if (isset($labels[$product_id])) { return $labels[$product_id]; } $labels = $this->db->getColumn( 'SELECT label_id FROM ?:product_sd_labels WHERE product_id = ?i', $product_id ); Registry::set('sd_labels_products' . '.' . $product_id, $labels); return $labels ?: []; } public function removeLabel(string $label_id): bool { try { $result = $this->db->query('DELETE FROM ?:product_sd_labels WHERE label_id = ?s', $label_id); } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); return false; } return (bool) $result; } public function deleteLabelFromProducts(array $product_ids, array $label_ids): bool { try { $result = $this->db->query( 'DELETE FROM ?:product_sd_labels WHERE product_id IN (?n) AND label_id IN (?n)', $product_ids, $label_ids ); } catch (\Exception $e) { fn_set_notification( NotificationSeverity::ERROR, __('error'), $e->getMessage() ); return false; } return (bool) $result; } public function getParentVariationStatus(int $product_id): string { $variations_status = $this->db->getField( 'SELECT from_parent FROM ?:product_sd_labels WHERE product_id = ?i', $product_id ); return $variations_status; } } 