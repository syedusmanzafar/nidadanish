<?php
 declare(strict_types=1); namespace Tygh\Addons\SdLabels\Labels; use Tygh\Addons\SdLabels\Labels\AdditionalSettings\{AdditionalSetting, AdditionalSettingsCollection}; use Tygh\Database\Connection; use Tygh\Enum\{LabelType, YesNo}; use Tygh\Tygh; abstract class Label { public const DEFAULT_TEXT_COLOR = '#000000'; public const DEFAULT_BACKGROUND_COLOR = '#ffffff'; public const TOP_LEFT = 'TL'; public const TOP_RIGHT = 'TR'; public const BOTTOM_LEFT = 'BL'; public const BOTTOM_RIGHT = 'BR'; public const GRAPHIC = 'graphic'; public const TEXT = 'text'; protected $labelId; protected $labelCode; protected $displayType; protected $labelType; protected $name; protected $position; protected $status; protected $class; protected $attachable; protected $available_for_vendors; protected $tooltip_content; protected $additional_settings; protected $textColor; protected $backgroundColor; protected $mainPair; public function __construct(array $label) { $this->labelId = $label['label_id']; $this->labelType = $label['label_type']; $this->labelCode = $this->labelType === LabelType::CUSTOM ? $this->labelType . $this->labelId : $this->labelType; $this->name = $label['name']; $this->position = $label['position']; $this->status = $label['status']; $this->mainPair = $label['main_pair']; $this->attachable = $label['attachable']; $this->class = 'sd-label--code-' . str_replace('_', '-', $this->labelCode); $this->backgroundColor = $label['background_color']; $this->textColor = $label['text_color']; $this->mainPair = $label['main_pair']; $this->displayType = $label['display_type']; $this->available_for_vendors = $label['available_for_vendors'] ?? YesNo::NO; $this->tooltip_content = $label['tooltip_content'] ?? ''; $this->additional_settings = $this->buildAdditionalSettings( !empty($label['additional_settings']) && is_string($label['additional_settings']) ? unserialize($label['additional_settings']) : [] ); } public function getLabelId(): int { return (int) $this->labelId; } public function getDisplayType(): string { return $this->displayType; } public function getLabelType(): string { return $this->labelType; } public function getName($lang_code = DESCR_SL): string { return $this->name[$lang_code] ?? $this->name['en']; } public function setName($name): void { $this->name = $name; } public function getPosition(): string { return $this->position; } public function getStatus(): string { return $this->status; } public function getTextColor(): string { return $this->textColor; } public function setTextColor(string $textColor): void { $this->textColor = $textColor; } public function setMainPair(array $mainPair): void { $this->mainPair = $mainPair; } public function getMainPair(): array { return $this->mainPair; } public function isAttachable(): string { return $this->attachable; } public function isAvailableForVendors(): bool { return $this->available_for_vendors === YesNo::YES; } public function checkConditions(): bool { return true; } public function getHint(): ?string { return null; } public function getTooltip($lang_code = DESCR_SL): string { return $this->tooltip_content[$lang_code] ?? $this->tooltip_content['en']; } protected function buildAdditionalSettings(array $additional_settings_data): AdditionalSettingsCollection { $additional_settings_collection = new AdditionalSettingsCollection(); $additional_settings_schema = fn_get_schema('labels', 'additional_settings'); if (isset($additional_settings_schema[$this->labelCode])) { foreach ($additional_settings_schema[$this->labelCode] as $additional_setting) { $additional_setting['value'] = $additional_setting['value'] ?? $additional_settings_data[$additional_setting['code']] ?? $additional_setting['default_value'] ?? false; if (!$additional_setting) { unset($additional_setting['value']); } $additional_settings_collection->addSetting(AdditionalSetting::buildFromArray($additional_setting)); } } return $additional_settings_collection; } public function toArray(): array { return [ 'label_id' => $this->labelId, 'name' => $this->getName(), 'position' => $this->position, 'status' => $this->status, 'class' => $this->class, 'display_type' => $this->displayType, 'label_type' => $this->labelType, 'attachable' => $this->attachable, 'background_color' => $this->backgroundColor, 'text_color' => $this->textColor, 'main_pair' => $this->mainPair, 'available_for_vendors' => $this->available_for_vendors, 'tooltip_content' => $this->getTooltip(), 'hint' => $this->getHint(), 'additional_settings' => $this->additional_settings->toArray(), ]; } } 