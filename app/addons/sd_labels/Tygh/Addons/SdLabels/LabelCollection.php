<?php
 declare(strict_types=1); namespace Tygh\Addons\SdLabels; use Tygh\Addons\SdLabels\Labels\Label; use Tygh\Enum\{YesNo, LabelStatus}; class LabelCollection extends Collection { public function __construct() { $this->collection = []; } public function addLabel(Label $label): void { $this->collection[$label->getLabelId()] = $label; } public function getLabelById(int $label_id) { return $this->collection[$label_id] ?? false; } public function getLabelByType(string $label_type) { foreach ($this->collection as $label) { if ($label->getLabelType() === $label_type) { return $label; } } return false; } public function getActive(): LabelCollection { $collection = new LabelCollection(); foreach ($this->collection as $label) { if ($label->getStatus() === LabelStatus::ACTIVE) { $collection->addLabel($label); } } return $collection; } public function getAttachable(): LabelCollection { $collection = new LabelCollection(); foreach ($this->collection as $label) { if ($label->isAttachable() === YesNo::YES) { $collection->addLabel($label); } } return $collection; } public function getLabelByDisplayType(string $display_type): LabelCollection { $new_collection = new LabelCollection(); foreach ($this->collection as $label) { if ($label->getDisplayType() === $display_type) { $new_collection->addLabel($label); } } return $new_collection; } public function searchLabelByName(string $name): LabelCollection { if (empty($name)) { return $this; } $collection = new LabelCollection(); foreach ($this->collection as $label) { if (stripos($label->getName(), $name) !== false) { $collection->addLabel($label); } } return $collection; } public function searchLabelByStatus(string $status): LabelCollection { if (empty($status)) { return $this; } $collection = new LabelCollection(); foreach ($this->collection as $label) { if ($label->getStatus() === $status) { $collection->addLabel($label); } } return $collection; } public function getVendorLabels(): LabelCollection { $collection = new LabelCollection(); foreach ($this->collection as $label) { if ($label->isAvailableForVendors()) { $collection->addLabel($label); } } return $collection; } public function paginate($params, $items_per_page): array { $default_params = [ 'page' => 1, 'items_per_page' => $items_per_page ]; $params = array_merge($default_params, $params); $params['total_items'] = count($this->collection); if ($params['total_items'] <= $params['items_per_page']) { return [$this, $params]; } $start = $params['page'] * $params['items_per_page'] - $params['items_per_page']; $slice = array_slice($this->collection, $start, $params['items_per_page']); $new_collection = new LabelCollection(); foreach ($slice as $label) { $new_collection->addLabel($label); } return [$new_collection, $params]; } public function toArray(): array { $labels_array = []; foreach ($this->collection as $label) { $labels_array[] = $label->toArray(); } $labels_array = $this->sortByPosition($labels_array); return $labels_array; } public function sortByPosition(array $labels_array): array { return fn_sort_array_by_key($labels_array, 'position'); } } 