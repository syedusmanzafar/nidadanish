<?php
 class AdminProductLabelsCest { private $admin_index; private $current_page; public function _before(AcceptanceTester $I): void { $I->amLoggedInAs('admin'); $options = $I->getOptions(); $this->admin_index = '/' . $options['admin_index']; } public function _after(AcceptanceTester $I): void { $I->dontSeeErrors($this->current_page); } public function checkProductLabelAddonSettingsPage(AcceptanceTester $I, $scenario): void { $config = $I->getAcceptanceSuiteConfig('WebDriver'); if (empty($config)) { $scenario->skip('WebDriver required for this test'); } $I->wantTo('Check ProductLabels addon settings page'); $this->current_page = $this->admin_index . '?dispatch=addons.update&addon=sd_labels'; $I->amOnPage($this->current_page); $general_settings = [ '#container_addon_option_sd_labels_lkey', '#collapsable_addon_option_sd_labels_header_detail_product', '#container_addon_option_sd_labels_detail_product_labels_overlay', '#container_addon_option_sd_labels_products_viewer_labels_overlay', '#collapsable_addon_option_sd_labels_header_products_viewer', '#container_addon_option_sd_labels_products_multicolumns_template_viewer_labels_position', '#container_addon_option_sd_labels_products_without_options_template_viewer_labels_position', '#container_addon_option_sd_labels_detail_product_labels_position', '#collapsable_addon_option_sd_labels_header_label_type_text', '#container_addon_option_sd_labels_text_label_max_items', '#container_addon_option_sd_labels_text_label_is_column', '#collapsable_addon_option_sd_labels_header_label_type_graphic', '#container_addon_option_sd_labels_graphic_label_max_items', '#container_addon_option_sd_labels_graphic_label_image_width', '#container_addon_option_sd_labels_graphic_label_image_height', ]; foreach ($general_settings as $general_setting) { $I->seeElement($general_setting); } $cron_settings = [ '#content_sd_labels_section_cron', '#container_addon_option_sd_labels_cron_days_when_product_is_new', '#container_addon_option_sd_labels_cron_count_of_hits', '#container_addon_option_sd_labels_cron_hit_periods_of_counting', ]; $I->clickElement('#sd_labels_section_cron'); foreach ($cron_settings as $cron_setting) { $I->seeElement($cron_setting); } } public function checkLabelCreating(AcceptanceTester $I, $scenario): void { $config = $I->getAcceptanceSuiteConfig('WebDriver'); if (empty($config)) { $scenario->skip('WebDriver required for this test'); } $I->wantTo('Check creation/deletion of custom labels'); $this->current_page = $this->admin_index . '?dispatch=sd_labels.manage'; $I->amOnPage($this->current_page); $I->seeElement('form[name="sd_labels_form"]'); $I->wantTo('Create temp label'); $I->clickElement('#opener_add_new_label'); $I->wait(1); $I->seeElement('div[aria-describedby="content_add_new_label"]'); $I->fillField('label_data[name]', 'temp_label'); $I->clickElement('input[name="dispatch[sd_labels.update]"]'); $I->wantTo('Remove all custom label'); $I->clickElement('#drag_text_labels_4 > td.right.mobile-hide > div > div > a'); $I->wait(1); $I->clickElement('#drag_text_labels_4 > td.right.mobile-hide > div > div > ul > li:nth-child(2) > a'); $I->wait(1); $I->acceptPopup(); $I->cantSeeElement('[id^=drag_text_labels_label]'); $I->wantTo('Create text custom label'); $I->clickElement('#opener_add_new_label'); $I->wait(2); $I->seeElement('div[aria-describedby="content_add_new_label"]'); $I->fillField('label_data[name]', 'text_label'); $I->clickElement('input[name="dispatch[sd_labels.update]"]'); $I->wantTo('Check text label settings'); $I->seeElement('a[data-ca-external-click-id^="opener_groupdefault"]'); $I->clickElement('a[data-ca-external-click-id^="opener_groupdefault"]'); $I->wait(2); $I->canSeeInField('label_data[display_type]', 'text'); $I->seeElement('div.buttons-container.buttons-container-picker > a'); $I->clickElement('div.buttons-container.buttons-container-picker > a'); } public function checkLabelAttaching(AcceptanceTester $I, $scenario): void { $config = $I->getAcceptanceSuiteConfig('WebDriver'); if (empty($config)) { $scenario->skip('WebDriver required for this test'); } $I->wantTo('Attach labels to product'); $this->current_page = $this->admin_index . '?dispatch=products.update&product_id=12'; $I->amOnPage($this->current_page); $I->seeElement('#addons.cm-js'); $I->clickElement('#addons.cm-js'); $I->seeElement('#acc_sd_labels'); $I->checkOption('[id=elem_sd_labels_3]'); $I->checkOption('[id=elem_sd_labels_4]'); $I->checkOption('[id^=elem_sd_labels]'); $I->clickElement('.cm-product-save-buttons'); } public function checkMultiAttaching(AcceptanceTester $I, $scenario): void { $config = $I->getAcceptanceSuiteConfig('WebDriver'); if (empty($config)) { $scenario->skip('WebDriver required for this test'); } $I->wantTo('Check multi product updating'); $this->current_page = $this->admin_index . '?dispatch=products.manage'; $I->amOnPage($this->current_page); $I->clickElement('td.left.mobile-hide'); $I->clickElement('li.btn.bulk-edit__btn.bulk-edit__btn--edit-products.mobile-hide > span > a'); $I->clickElement('a.cm-check-items.cm-off.underlined'); $I->clickElement('input[name^="selected_fields[data][filter_description_new]"]'); $I->clickElement('input[name^="selected_fields[data][filter_description_hit]"]'); $I->clickElement('div.buttons-container.buttons-container-picker > input[name="dispatch[products.store_selection]"]'); $I->clickElement('#main_column > div > div.admin-content-wrap > div.admin-content-wrapper > div > div > div.extra-tools > a'); $I->clickElement('input[id^="elements-switcher-filter_description"]'); $I->clickElement('input[id^="field_filter_description"]'); $I->clickElement('input[name="dispatch[products.m_override]"]'); $I->clickElement('input[name="dispatch[products.m_update]"]'); $I->wait(5); $this->current_page = $this->admin_index . '?dispatch=products.update&product_id=17'; $I->amOnPage($this->current_page); $I->seeElement('#addons.cm-js'); $I->clickElement('#addons.cm-js'); $I->seeElement('#acc_sd_labels'); $checked_labels = [ '#elem_sd_labels_3', '#elem_sd_labels_4', ]; foreach ($checked_labels as $checked) { $I->canSeeCheckboxIsChecked($checked); } } public function checkFilterCreating(AcceptanceTester $I, $scenario): void { $config = $I->getAcceptanceSuiteConfig('WebDriver'); if (empty($config)) { $scenario->skip('WebDriver required for this test'); } $I->wantTo('Check label filter creating'); $this->current_page = $this->admin_index . '?dispatch=product_filters.manage'; $I->amOnPage($this->current_page); $I->clickElement('#opener_add_product_filter'); $I->wait(3); $I->seeElement('#elm_filter_filter_by_0'); $I->selectOption('#elm_filter_filter_by_0', 'B-L'); $I->fillField('#elm_filter_name_0', 'label_filter'); $I->clickElement('input[name="dispatch[product_filters.update]"]'); $I->seeElement('a[title="label_filter"]'); } } 